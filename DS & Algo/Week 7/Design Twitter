'''
Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:

    postTweet(userId, tweetId): Compose a new tweet.
    getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
    follow(followerId, followeeId): Follower follows a followee.
    unfollow(followerId, followeeId): Follower unfollows a followee.
'''

from collections import defaultdict
from heapq import merge

class Twitter(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        #follower keeps track of all the followees.
        #tweets keeps track of all the tweets made by a user.
        #time is the timestamp for each tweet.
        
        self.follower=defaultdict(set)
        self.tweets=defaultdict(list)
        self.time=0

    def postTweet(self, userId, tweetId):
        """
        Compose a new tweet.
        :type userId: int
        :type tweetId: int
        :rtype: void
        """
        #if a user makes a tweet add it to his tweets with a timestamp.
        #we reduce a time stamp because a lower timestamp means a newer tweet.
        self.tweets[userId].append((self.time,tweetId))
        self.time-=1

    def getNewsFeed(self, userId):
        """
        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
        :type userId: int
        :rtype: List[int]
        """
        #followees is a list of all the users which needs to be considered including all the followees and the user itself.
        #alltweets all the tweets made by all these users. they need to be reversed because newer tweets are at the end of the list.
        #heapq.merge merges two sorted iterables into one sorted iterable. So now we have all the tweets sorted according to there timestamps.
        
        followees=self.follower[userId]
        followees.add(userId)        
        alltweets=[reversed(self.tweets[u]) for u in followees]
        alltweets=merge(*alltweets)
        ans=[]
        for t in alltweets:
            ans.append(t[1])
            if len(ans) == 10:
                break
        return ans

    def follow(self, followerId, followeeId):
        """
        Follower follows a followee. If the operation is invalid, it should be a no-op.
        :type followerId: int
        :type followeeId: int
        :rtype: void
        """
        #if a follower follows someone add it to the set.
        self.follower[followerId].add(followeeId)

    def unfollow(self, followerId, followeeId):
        """
        Follower unfollows a followee. If the operation is invalid, it should be a no-op.
        :type followerId: int
        :type followeeId: int
        :rtype: void
        """
        #if a follower unfollows someone remove it from the set.
        self.follower[followerId].discard(followeeId)
