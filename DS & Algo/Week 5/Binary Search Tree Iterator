'''
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.
'''
#Python3

Time Complexity- O(N)
Space Complexity- O(N)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    
    
    def __init__(self, root: TreeNode):
        self.i=0
        
        def inorder(curr):
        
            if curr==None:
                return []
            
            return inorder(curr.left)+[curr.val]+inorder(curr.right)
        
        self.lis=inorder(root)
        
        

    def next(self) -> int:
        """
        @return the next smallest number
        """
        self.i+=1
        return self.lis[self.i-1]
    
    

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        if self.i>=len(self.lis):
            return False
        return True


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
