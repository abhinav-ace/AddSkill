'''
Given two binary search trees root1 and root2.

Return a list containing all the integers from both trees sorted in ascending order.
'''
#Python3

Time Complexity- O(N); even though we are using sorted which should make time complexity O(NlogN) but it wont because 
                        Tim sort will realize that the array is sorted in two halves so it simply merges them in O(N).
Space Complexity- O(N+M)


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        
        l=[]
        
        def inorder(curr):
            
            if curr==None:
                return
            
            inorder(curr.left)
            l.append(curr.val)
            inorder(curr.right)
        
        inorder(root1)
        inorder(root2)
        
        return sorted(l)
