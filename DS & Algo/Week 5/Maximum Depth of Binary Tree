'''
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],
'''
#Python3

Time Complexity- O(N)
Space Complexity- O(h)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
                   
        if root==None:
            return 0
            
        #maximum depth will be the maximum of depth of 1+ left subtree and 1+ right subtree.
        l=1+self.maxDepth(root.left)
        r=1+self.maxDepth(root.right)
        
        if l>r:
            return l
        return r
        
        
        #CAN ALSO DO THIS SIMPLY
        '''def maxDepth(self, root: TreeNode) -> int:
                   
          if root==None:
              return 0
              
          return 1+max(self.maxDepth(root.left),self.maxDepth(root.right))'''
