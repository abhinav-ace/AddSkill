'''
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
'''
#Python3

Time Complexity- O(N)
Space Complexity- O(h)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        
        if root==None:
            return 1
        
        def symm(t1,t2):
            
            #If both are none-> symmetric
            if t1==t2==None:
                return 1
            
            #If one of em is none-> not symmetric
            if t1==None or t2==None:
                return 0
            
            #if current node values are not equal-> not symmetric
            if t1.val!=t2.val:
                return 0
            
            #perform the same on the left and right subtree
            return symm(t1.left,t2.right) and symm(t1.right,t2.left)
        
        return symm(root.left,root.right)
