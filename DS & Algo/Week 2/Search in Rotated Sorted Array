'''
You are given an integer array nums sorted in ascending order, and an integer target.
Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
If target is found in the array return its index, otherwise, return -1.
'''
#Python3

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        n=len(nums)
        
        #Using Binary Search to Find the index of minimum value
        low,high=0,n-1
        
        while low<high:
            mid=(low+high)//2
            
            #Possible only if there has been a decrement in values from mid to min and increment from min to high
            if nums[mid]>nums[high]:
                low=mid+1
            
            #values are all in non decreasing order from mid to high
            else:
                high=mid
        
        #Offset is the number of rotations done on the list
        offset=low
        
        #Using Binary Search with  offset value in consideration
        low,high=0,n-1
        
        while low<=high:
            
            mid=(low+high)//2
            
            #offmid would be the index of the mid in the non rotated list
            offmid=(mid+offset)%n
            
            if nums[offmid]==target:
                return offmid
            
            if nums[offmid]<target:
                low=mid+1
            else:
                high=mid-1
        return -1
