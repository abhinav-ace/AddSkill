'''
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Follow up:

    Could you solve this problem without using the library's sort function?
    Could you come up with a one-pass algorithm using only O(1) constant space?

'''
#Python3

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n=len(nums)
        
        #i keeps track of 0's that are inplace
        #j keeps track of 2's that are inplace
        #k is the loop pointer
        
        i=0
        j=n-1
        k=0
        
        while k<=j:
        
            #When we encounter 0 bring it to the left increment both i and k
            if nums[k]==0:
                nums[k],nums[i]=nums[i],nums[k]
                i+=1
                k+=1
                
            #When we encounter 2 bring it to the right decrement only j because
            #if nums[k]==0 ,swapping the j and k will bring 0 to k
            #so we will have to operate on it again and check if it needs swapping
            #if nums[k]==2 ,similar situation will arise so we have to operate on the kth index twice
            elif nums[k]==2:
                nums[k],nums[j]=nums[j],nums[k]
                j-=1
            
            #nums[k]==1
            else: 
                k+=1            
         
